\ProvidesPackage{abbrev}[2017/08/14 Abbreviations]
\RequirePackage{etoolbox}
\RequirePackage{strings}
%
% Abbreviates text.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% ABBREVIATION CLASSES
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% An abbreviation class is defined in the macro \abb@class@[name]. The macro
% contains a series of items of the form:
%
%   {[full text]}{[abbrev.]}
%
% Creates a new abbreviation class.
\def\abb@new#1{\@namedef{abb@class@#1}{}}%
%
% Adds an item to the abbreviation class. #1 is the class, #2 the unabbreviated
% form, #3 the abbreviated form.
\def\abb@add#1#2#3{%
    \find@word{#2}{%
        \abb@add@punct{#1}{#3}%
    }{%
        \abb@add@error{group}%
    }{%
        \abb@add@{#1}{#3}%
    }{%
        \abb@add@error{nothing}{}{}%
    }%
}
\def\abb@add@error#1#2#3{%
    \PackageError{abbrev}{%
        Abbreviation text `#2#3' should not start with #1 `#2'
    }{%
        Review the text to be abbreviated
    }%
}
\def\abb@add@punct#1#2#3#4{%
    \@test \ifcat \relax\noexpand#3\fi{%
        \abb@add@error{control sequence}{#3}{#4}%
    }{%
        \abb@add@{#1}{#2}{#3}{#4}%
    }%
}
%
% #1 is the class, #2 is the abbreviated form, #3 the first word, #4 the
% remainder.
\def\abb@add@#1#2#3#4{%
    \make@find@start{#3}% I think this is superfluous
    \expandafter\abb@add@@
        \csname abb@class@#1@#3\endcsname
        {#2}{#4}%
}
%
% #1 is the macro containing the class and first word, #2 the abbreviated form,
% #3 the remainder of the abbreviation
\def\abb@add@@#1#2#3{%
    \ifx#1\relax \let#1\@empty \fi
    \abb@add@dotest#1{#3}%
    \addto@macro#1{{#3}{#2}}%
    \make@find@start{#3}%
}
\let\abb@add@dotest\@gobbletwo
\def\abb@add@test#1#2{%
    \ifx#1\@empty\else \expandafter\abb@add@test@#1\@stop{#2}\fi
}
\def\abb@add@test@#1#2#3\@stop#4{%
    \find@start{#1}{#4}{\abb@add@test@err{#4}{#1}}{}%
}
\def\abb@add@test@err#1#2#3#4{%
    \PackageWarning{abbrev}{%
        Adding abbreviation for `#2',\MessageBreak
        but there is already one for `#1'.\MessageBreak
        This occurred%
    }%
}
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% NEW ABBREVIATIONS ALGORITHM
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Text is abbreviated according to the following procedure:
%
% 1. Read each word from the text to be abbreviated, using \find@word.
%
%    a. If it is not a word or punctuation, do not process the item and
%       continue.
%
%    b. Otherwise, retrieve the list of abbreviations starting with this word.
%       If there are none, then continue.
%
%    c. Iterate through each of the abbreviations associated with the word, and
%       see if the remainder of the text to be abbreviated starts with any of
%       the abbreviation texts. If so, then insert the relevant abbreviation
%       text, correcting for dots as appropriate.
%
% 2. Collapse spaces for single-letter abbreviations.
%
% Abbreviate a given text using an abbreviation class. #1 is the class, #2 is
% the text, and #3 is a callback function for the result.
\def\abb@abbrev#1#2#3{%
    \abb@abbrev@acc{#2}{}{#1}{#3}%
}
%
% Entrypoint for abbreviating text.
%
% #1 is the text to abbreviate, #2 is the accumulated abbreviated text, #3 is
% the class, #4 is the callback. (#2-#4 are left on the stack.)
\def\abb@abbrev@acc#1{%
    \find@word{#1}\abb@abbrev@punct\abb@abbrev@grp\abb@abbrev@wd\abb@abbrev@end
}
%
% The token being abbreviated is punctuation. If it is a macro, nothing is done.
% Otherwise, treat it like a word.
%
% #1 is the punctuation, #2 the remaining text, #3 the accumulated text, #4 the
% class, #5 the callback. (#4-#5 are left on the stack.)
\def\abb@abbrev@punct#1#2#3{%
    \@test \ifcat \relax\noexpand#1\fi{%
        \abb@abbrev@acc{#2}{#3#1}%
    }{%
        \abb@abbrev@wd{#1}{#2}{#3}%
    }%
}
%
% The token being abbreviated is a group. Nothing is done.
%
% #1 is the group, #2 the remaining text, #3 the accumulated text, #4 the
% class, #5 the callback. (#4-#5 are left on the stack.)
\def\abb@abbrev@grp#1#2#3{%
    \abb@abbrev@acc{#2}{#3{#1}}%
}
%
% There is no more text left to abbreviate. Invoke the callback with the
% accumulated text.
%
% #1 is the accumulated text, #2 the class, #3 the callback.
\def\abb@abbrev@end#1#2#3{%
    #3{#1}%
}
%
% The token to be abbreviated is a word or abbreviatable punctuation. If there
% is no defined abbreviation for the word, then continue to the next token.
% Otherwise, call \abb@abbrev@wd@, placing on the stack the list of
% abbreviations associated with the word.
%
% #1 is the word, #2 the remaining text, #3 the accumulated text, #4 the
% class, #5 the callback. (#5 is left on the stack.)
\def\abb@abbrev@wd#1#2#3#4{%
    \@ifundefined{abb@class@#4@#1}{%
        \abb@abbrev@acc{#2}{#3#1}{#4}%
    }{%
        \expandafter\expandafter\expandafter\abb@abbrev@wd@
            \csname abb@class@#4@#1\endcsname \@stop
            {#1}{#2}{#3}{#4}%
    }%
}
% #1 and #2 are the first elements of the abbreviation word list; #3 is the
% remainder of that list. #4-#8 are the args to \abb@abbrev@wd. (#7-#8 are left
% on the stack.)
\def\abb@abbrev@wd@#1#2#3\@stop#4#5#6{%
    \find@start{#1}{#5}{%
        \abb@abbrev@found{#6}{#2}%
    }{%
        \@iden
    }%
    {% This is left on the stack after whatever \find@start calls
        \ifstrempty{#3}{%
            \abb@abbrev@acc{#5}{#6#4}%
        }{%
            \abb@abbrev@wd@#3\@stop{#4}{#5}{#6}%
        }%
    }%
}
%
% #1 is the accumulated text if we abbreviate, #2 is the abbreviation to add, #3
% is the remaining text if we abbreviate, #4 is the command to run if we bail
% out, #5 is the class, and #6 is the callback. (#5-#6 are left on the stack.)
\def\abb@abbrev@found#1#2#3#4{%
    %
    \@ifstartswithwordchar{#3}{%
        #4%
    }{%
        \find@try\find@start{%
            { }{\abb@abbrev@maybechop{ }}%
            {.}{\abb@abbrev@maybechop{.}}%
        }{#3}{\abb@abbrev@acc}%
        {#3}{#1#2}%
    }%
}
%
% #1 is the character to test for potential removal at the end of the
% accumulated text, #2 is the remaining text with the character removed, #3 is
% the remaining text without the character removed, and #4 is the accumulated
% text. #5 is the class, #6 the callback (#5-#6 are left on the stack).
\def\abb@abbrev@maybechop#1#2#3#4{%
    \find@end{#1}{#4}{%
        \@firstoftwo{\abb@abbrev@acc{#2}{#4}}%
    }{\abb@abbrev@acc{#3}{#4}}%
}%
\make@find@start{.}
\make@find@start{ }
\make@find@end{.}
\make@find@end{ }
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% REMOVAL OF SPACES BETWEEN DOTTED INITIALS
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Removes dots between initials. This uses \find@next on the text with a state
% machine having these states:
%
% a. Initial state
%    - On letter, go to b. Otherwise go to a
% b. Seen a single letter
%    - On dot, go to c. On letter, go to d. Otherwise go to a
% c. Seen a dot after b
%    - On space, go to e. On letter, go to b. Otherwise, go to a
% d. In a word
%    - On letter, go to d. Otherwise go to a
% e. Seen a space after c
%    - On letter, go to f. On number, collapse the space and go to d.
%    - Otherwise, go to a.
% f. Seen a single letter after e
%    - On dot, collapse the space and go to c. On letter, go to d.
%    - Otherwise, go to a.
%
% Each state has macros for each of the possible find results from \find@next.
% Additionally, these items are always left on the token stack:
% - the processed text
% - the deferred text
% - the dot character
% - the final callback
%
% #1 is the text, #2 is the character to treat as a dot, and #3 is the callback
% for the result.
\def\abb@initialdots#1#2#3{%
    \abb@id@a{#1}%
    {}% Initially the processed text is empty.
    {}% Deferred text is empty.
    {#2}% The dot character.
    {#3}% At end of the macro stack for use by \abb@id@done
}
\def\abb@id@done#1#2#3#4{%
    #4{#1#2}%
}
\def\abb@id@a#1{%
    \find@next{#1}\abb@id@backtoa\abb@id@backtoa\abb@id@a@letter\abb@id@done
}
\def\abb@id@backtoa#1#2#3#4{%
    \abb@id@a{#2}{#3#4#1}{}%
}
\def\abb@id@backtod#1#2#3#4{%
    \abb@id@a{#2}{#3#4#1}{}%
}
\let\abb@id@a@space\abb@id@backtoa
\let\abb@id@a@group\abb@id@backtod
\def\abb@id@a@letter#1#2#3#4{%
    \@ifletter{#1}{%
        \abb@id@b{#2}{#3#4#1}{}%
    }{%
        \@ifdigit{#1}{%
            \abb@id@d{#2}{#3#4#1}{}%
        }{%
            \abb@id@a{#2}{#3#4#1}{}%
        }%
    }%
}
\def\abb@id@b#1{%
    \find@next{#1}\abb@id@b@space\abb@id@a@group\abb@id@b@letter\abb@id@done
}
\let\abb@id@b@space\abb@id@backtoa
\let\abb@id@b@group\abb@id@backtod
\def\abb@id@b@letter#1#2#3#4#5{%
    \@ifletter{#1}{%
        \abb@id@d{#2}{#3#4#1}{}%
    }{%
        \@test\ifx#1#5\fi{%
            \abb@id@c{#2}{#3#4#1}{}%
        }{%
            \abb@id@a{#2}{#3#4#1}{}%
        }%
    }%
    {#5}% Put the dot character back on the stack
}
\def\abb@id@c#1{%
    \find@next{#1}\abb@id@c@space\abb@id@c@group\abb@id@c@letter\abb@id@done
}
\def\abb@id@c@space#1#2#3#4{%
    \abb@id@e{#2}{#3#4}{#1}%
}
\let\abb@id@c@group\abb@id@backtoa
\def\abb@id@c@letter#1#2#3#4{%
    \@ifletter{#1}{%
        \abb@id@b{#2}{#3#4#1}{}%
    }{%
        \@ifdigit{#1}{%
            \abb@id@d{#2}{#3#4#1}{}%
        }{%
            \abb@id@a{#2}{#3#4#1}{}%
        }%
    }%
}
\def\abb@id@d#1{%
    \find@next{#1}\abb@id@d@space\abb@id@d@group\abb@id@d@letter\abb@id@done
}
\let\abb@id@d@space\abb@id@backtoa
\let\abb@id@d@group\abb@id@backtod
\def\abb@id@d@letter#1#2#3#4{%
    \@ifwordchar{#1}{%
        \abb@id@d{#2}{#3#4#1}{}%
    }{%
        \abb@id@a{#2}{#3#4#1}{}%
    }%
}
\def\abb@id@e#1{%
    \find@next{#1}\abb@id@e@space\abb@id@e@group\abb@id@e@letter\abb@id@done
}
\def\abb@id@e@space#1#2#3#4{%
    \abb@id@e{#2}{#3}{#1}%
}
\let\abb@id@e@group\abb@id@backtod
\def\abb@id@e@letter#1#2#3#4{%
    \@ifletter{#1}{%
        \abb@id@f{#2}{#3}{#4#1}%
    }{%
        \@ifdigit{#1}{%
            \abb@id@d{#2}{#3#1}{}%
        }{%
            \abb@id@a{#2}{#3#4#1}{}%
        }%
    }%
}
\def\abb@id@f#1{%
    \find@next{#1}\abb@id@f@space\abb@id@f@group\abb@id@f@letter\abb@id@done
}
\let\abb@id@f@space\abb@id@backtoa
\let\abb@id@f@group\abb@id@backtod
\def\abb@id@f@letter#1#2#3#4#5{%
    \@ifwordchar{#1}{%
        \abb@id@d{#2}{#3#4#1}{}%
    }{%
        \@test\ifx#1#5\fi{%
            \abb@id@f@stripspace{#1}{#2}{#3}#4%
        }{%
            \abb@id@a{#2}{#3#4#1}{}%
        }%
    }%
    {#5}%
}
\def\abb@id@f@stripspace#1#2#3#4{%
    \abb@id@c{#2}{#3#4#1}{}%
}
%
% A token for dots.
%
\def\abb@dot{.}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% OPTIONS
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
\DeclareOption{asserts}{
    \let\abb@add@dotest\abb@add@test
}
\ProcessOptions\relax
%
\endinput
